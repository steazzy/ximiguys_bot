
from functions import *
from config import *
from variables import storage, FSMContext, Form


@dp.message_handler(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º", chat_type=types.ChatType.PRIVATE)
async def send_meme(msg: types.message):
    if await isBanned(msg.from_user.id):
        return
    if (
        str(msg.from_user.id) in uncheckedMemes
        and uncheckedMemes[str(msg.from_user.id)] >= 9
    ):
        return await msg.answer(
            "–°–µ–π—á–∞—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–µ–º–æ–≤ –æ—Ç –≤–∞—Å, –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–ø—è—Ç—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–µ–º—ã"
        )
    if safeMode == True:
        return await msg.answer("–ê–¥–º–∏–Ω –≤–∫–ª—é—á–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
    await Form.meme.set()
    await msg.answer("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –º–µ–º", reply_markup=cancelKb)


@dp.message_handler(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", chat_type=types.ChatType.PRIVATE)
async def send_message(msg: types.message):
    if await isBanned(msg.from_user.id):
        return
    if safeMode == True:
        return await msg.answer("–ê–¥–º–∏–Ω –≤–∫–ª—é—á–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
    await Form.message.set()
    await msg.answer("üì• –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=cancelKb)


@dp.message_handler(commands="ban")
async def banCommand(msg: types.Message):
    if msg.from_user.id != OwnerID:
        return
    user_id = msg.get_args()
    result = await ban(user_id)
    await msg.answer(result)


@dp.message_handler(commands="unban")
async def unban_user(msg: types.Message):
    if msg.from_user.id != OwnerID:
        return
    user_id = msg.get_args()
    result = await unban(user_id)
    await msg.answer(result)


@dp.message_handler(commands="post")
async def post_from(msg: types.Message):
    if msg.from_user.id != OwnerID:
        return
    postMeme = msg.reply_to_message
    if postMeme is not None:
        await meme.post(
            postMeme.caption,
            postMeme.from_user.full_name,
            postMeme.from_user.id,
            postMeme.chat.id,
            postMeme.message_id,
        )


@dp.message_handler(commands="stats")
async def post_from(msg: types.Message):
    data = update_data()
    reply_to = msg.reply_to_message
    if reply_to is not None:
        name = reply_to.from_user.full_name
        id = reply_to.from_user.id
        user = f"[{name}](tg://user?id={id})"
        if str(id) not in approvedMemes:
            message = f"–£ {user} –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–º–æ–≤"
        else:
            memes = approvedMemes[str(id)]["memes"]
            message = f"–ü—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–º–æ–≤ —É {user}: `{memes}`"
    else:
        name = msg.from_user.full_name
        id = msg.from_user.id
        user = f"[–≤–∞—Å](tg://user?id={id})"
        if str(id) not in approvedMemes:
            message = f"–£ {user} –Ω–µ—Ç –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–º–æ–≤"
        else:
            memes = approvedMemes[str(id)]["memes"]
            message = f"–£ {user} `{memes}` –ø—Ä–∏–Ω—è—Ç—ã—Ö –º–µ–º–æ–≤"
    await msg.reply(message, parse_mode="Markdown")


@dp.message_handler(commands="start", chat_type=[types.ChatType.PRIVATE])
async def send_welcome(msg: types.message):
    if await isBanned(msg.from_user.id):
        return
    if msg.from_user.id != OwnerID:
        await msg.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–æ–π –º–µ–º –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            reply_markup=mainKeyboard,
        )
    else:
        await msg.answer(
            "–ö—É, –±–æ—Å—Å",
            parse_mode="Markdown",
            reply_markup=adminKeyboard,
        )


@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞", chat_type=types.ChatType.PRIVATE)
async def cancel_handler(msg: types.message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return await msg.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –æ–±—Ä–∞—Ç–Ω–æ", reply_markup=mainKeyboard
        )
    logging.info("Cancelling state %r", current_state)
    await state.finish()
    await msg.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=mainKeyboard)


@dp.message_handler(
    content_types=types.ContentTypes.PHOTO
    | types.ContentTypes.VIDEO
    | types.ContentTypes.TEXT
    | types.ContentTypes.ANIMATION,
    state=Form.meme,
)
async def process_meme(msg: types.message, state: FSMContext):
    name = msg.from_user.full_name
    id = msg.from_user.id
    username = msg.from_user.username
    if msg.text:
        type = "text"
        caption = f"{msg.text}\n\nby [{name}](tg://user?id={id})"
        meme = await bot.send_message(
            chat_id=GroupID,
            text=caption,
            parse_mode="Markdown",
            reply_markup=memeKeyboard,
        )
    else:
        caption = msg.caption
        type = "media"
        if caption is not None:
            caption = f"{msg.caption}\n\nby [{name}](tg://user?id={id})"
        else:
            caption = f"by [{name}](tg://user?id={id})"
        meme = await bot.copy_message(
            message_id=msg.message_id,
            chat_id=GroupID,
            from_chat_id=id,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=memeKeyboard,
        )
    memesToCheck[meme.message_id] = {
        "id": id,
        "name": name,
        "username": username,
        "type": type,
        "caption": caption,
        "reply_to_id": msg.message_id,
        "status": "unchecked"
    }
    await msg.reply("üì® –í–∞—à –º–µ–º –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏", reply_markup=mainKeyboard)
    if str(id) not in uncheckedMemes:
        uncheckedMemes[str(id)] = 1
    else:
        uncheckedMemes[str(id)] += 1
    save_data()
    await state.finish()


@dp.message_handler(
    content_types=types.ContentTypes.PHOTO
    | types.ContentTypes.VIDEO
    | types.ContentTypes.TEXT
    | types.ContentTypes.ANIMATION,
    state=Form.message,
)
async def proccess_message(msg: types.message, state: FSMContext):
    name = msg.from_user.full_name
    id = msg.from_user.id
    username = msg.from_user.username
    if msg.text:
        type = "text"
        caption = f"{msg.text}\n\nby [{name}](tg://user?id={id})"
        message = await bot.send_message(
            chat_id=GroupID,
            text=caption,
            parse_mode="Markdown",
            reply_markup=supportkb,
        )   
    else:
        caption = msg.caption
        type = "media"
        if caption is not None:
            caption = f"{msg.caption}\n\nby [{name}](tg://user?id={id})"
        else:
            caption = f"by [{name}](tg://user?id={id})"
        message = await bot.copy_message(
            message_id=msg.message_id,
            chat_id=GroupID,
            from_chat_id=id,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=supportkb,
        )
    supportMessages[message.message_id] = {
        "id": id,
        "name": name,
        "type": type,
        "username": username,
        "caption": caption,
        "reply_to_id": msg.message_id,
    }
    await msg.reply("üì® –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞", reply_markup=mainKeyboard)
    save_data()
    await state.finish()


@dp.message_handler(text="Database")
async def send_bd(msg: types.Message):
    if msg.from_user.id != OwnerID:
        return
    db = open("db.json", "rb")
    await bot.send_document(OwnerID, document=db)


@dp.message_handler(text="–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º")
async def safeModeToggle(msg: types.Message):
    if msg.from_user.id != OwnerID:
        return
    global safeMode
    safeMode = not safeMode
    if safeMode == True:
        status = "–≤–∫–ª—é—á–µ–Ω"
    else:
        status = "–≤—ã–∫–ª—é—á–µ–Ω"
    await msg.answer(f"–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º –±—ã–ª {status}")


@dp.callback_query_handler()
async def query_handler(callback: types.CallbackQuery):
    message_id = str(callback.message.message_id)
    user_id = callback.from_user.id
    full_name = callback.from_user.full_name
    match callback.data:
        case "acceptmeme":
            await meme.approve(
                message_id,
                user_id,
                full_name,
            )
            await callback.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ")
        case "declinememe":
            await meme.decline(
                message_id,
                user_id,
                full_name,
            )
            await callback.answer("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
        case "ban":
            await meme.ban(
                message_id,
                user_id,
                full_name,
            )
            await callback.answer("‚õî –ó–∞–±–∞–Ω–µ–Ω–æ")
        case "unban":
            await meme.unban(
                message_id,
                user_id,
                full_name,
            )
        case "rethink":
            await meme.rethink(
                message_id,
                user_id,
                full_name,
            )
            await callback.answer("‚úÖ –†–∞–∑–±–∞–Ω–µ–Ω–æ")


@dp.message_handler(chat_type=[types.ChatType.SUPERGROUP, types.ChatType.GROUP])
async def message_handler(msg: types.Message):
    data = update_data()
    reply_to = msg.reply_to_message
    if msg.chat.id != GroupID: return
    if reply_to is not None and reply_to.from_user.is_bot == True:
        message = str(reply_to.message_id)
        sendTo = await where_is(message)
        await bot.copy_message(
            from_chat_id=msg.chat.id,
            message_id=msg.message_id,
            reply_to_message_id=sendTo["reply_to_id"],
            chat_id=sendTo["id"]
        )
        await msg.reply("üì© –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")



@dp.message_handler()
async def message_handler(msg: types.Message):
    print(f"{msg.from_user.full_name}: {msg.text} Id: {msg.from_user.id}")

from main import *
from variables import *
